version: '2.2'
services:
############### MICROSERVICES ############### 
  bluejay_render:
    container_name: bluejay-render
    image: governify/render:commons
    environment:
      - NODE_ENV=production
      - PORT=80
      - LAYOUT=bootstrap3.html
      - LOGIN_USER=${USER_RENDER:?}
      - LOGIN_PASSWORD=${PASS_RENDER:?}
      - DEFAULT_VIEW=http://assets/api/v1/public/renders/index/view.html
      - DEFAULT_CONTROLLER=http://assets/api/v1/public/renders/index/controller.js
      - DEFAULT_MODEL=http://assets/api/v1/public/renders/index/model.json
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    networks:
      governify_network:
        aliases:
          - ui
    volumes:
      - './logs/render:/opt/app/logs'
    ports:
      - '5100:80'
    depends_on:
      - bluejay_assetsmanager
    mem_limit: 400m
    restart: 'unless-stopped'
# ================================================
  bluejay_assetsmanager:
    container_name: bluejay-assetsmanager
    image: 'governify/assets:commons'
    environment:
      - NODE_ENV=production
      - PORT=80
      - LOGIN_USER=${USER_ASSETS:?}
      - LOGIN_PASSWORD=${PASS_ASSETS:?}
      - PRIVATE_KEY=${KEY_ASSETS_MANAGER_PRIVATE:?}
    networks:
      governify_network:
        aliases:
          - assets
    volumes:
      - './assets:/home/project'
    ports:
      - '5200:80'
    mem_limit: 400m
    restart: 'unless-stopped'
# ================================================
  bluejay_reporter:
    container_name: bluejay-reporter
    image: governify/reporter:commons
    environment:
      - DB_HOST=influxdb
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    networks:
      governify_network:
        aliases:
          - reporter
    volumes:
      - './logs/bluejay-reporter:/opt/app/logs'
    ports:
      - '5300:80'
    mem_limit: 400m
    restart: 'unless-stopped'
    depends_on:
      - bluejay_assetsmanager
      - bluejay_registry_db
      - bluejay_influxdb
# ================================================
  bluejay_registry:
    container_name: bluejay-registry
    image: 'governify/registry:commons'
    networks:
      governify_network:
        aliases:
          - registry
    environment:
      - DB_HOST=mongo_registry
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    volumes:
      - './logs/registry:/opt/app/logs'
      - './static:/opt/app/public/static'
    ports:
      - '5400:80'
    depends_on:
      - bluejay_assetsmanager
      - bluejay_registry_db
    mem_limit: 400m
    restart: 'unless-stopped'
# ================================================
  bluejay_eventcollector:
    container_name: bluejay-eventcollector
    image: 'governify/collector-events:commons'
    environment:
      - NODE_ENV=production
      - PORT=80
      - REDIS_HOSTNAME=redis
      - KEY_SCOPE_MANAGER=${KEY_SCOPE_MANAGER}
      - KEY_GITHUB=${KEY_GITHUB}
      - KEY_PIVOTAL=${KEY_PIVOTAL}
      - KEY_TRAVIS_PUBLIC=${KEY_TRAVIS_PUBLIC}
      - KEY_TRAVIS_PRIVATE=${KEY_TRAVIS_PRIVATE}
      - KEY_HEROKU=${KEY_HEROKU}
      - KEY_CODECLIMATE=${KEY_CODECLIMATE}
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    networks:
      governify_network:
        aliases:
          - collector-events
    ports:
      - '5500:80'
    depends_on:
      - bluejay_assetsmanager
      - bluejay_redis
    mem_limit: 400m
    restart: 'unless-stopped'
# ================================================
  bluejay_grafana:
    container_name: bluejay-grafana
    image: governify/dashboard:1.0.3
    environment:
      - NODE_ENV=production
    networks:
      governify_network:
        aliases:
          - dashboard
    volumes:
      - 'bluejay_grafana_volume:/var/lib/grafana'
    ports:
      - '5600:3000'
    depends_on:
      - bluejay_assetsmanager
      - bluejay_reporter
    mem_limit: 400m
    restart: 'unless-stopped'
# ================================================
  bluejay_director:
    container_name: bluejay-director
    image: 'governify/director:commons'
    environment:
      - NODE_ENV=production
      - PORT=80
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    networks:
      governify_network:
        aliases:
          - director
    ports:
      - '5800:80'
    depends_on:
      - bluejay_assetsmanager
    mem_limit: 400m
    restart: 'unless-stopped'
# ================================================
  bluejay_scopemanager:
    container_name: bluejay-scopemanager
    image: 'governify/scope-manager:commons'
    environment:
      - NODE_ENV=production
      - PORT=80
      - KEY_ASSETS_MANAGER_PRIVATE=${KEY_ASSETS_MANAGER_PRIVATE}
      - KEY_SCOPE_MANAGER=${KEY_SCOPE_MANAGER}
      - KEY_HEROKU=${KEY_HEROKU}
      - KEY_GITHUB=${KEY_GITHUB}
      - GOV_INFRASTRUCTURE=${GOV_INFRASTRUCTURE:?}
    networks:
      governify_network:
        aliases:
          - scopes
    ports:
      - '5700:80'
    depends_on:
      - bluejay_assetsmanager
    mem_limit: 400m
    restart: 'unless-stopped'
# ================================================
  bluejay_join:
    container_name: bluejay-join
    image: 'governify/join-bluejay:develop'
    environment:
      - NODE_ENV=production
      - PORT=80
    networks:
      governify_network:
        aliases:
          - join
    ports:
      - '20080:80'
    mem_limit: 400m
    restart: 'unless-stopped'
############### DATABASES ###############
  bluejay_influxdb:
    image: 'influxdb:1.8.4-alpine'
    container_name: bluejay-influxdb
    networks:
      governify_network:
        aliases:
          - influxdb
    volumes:
      - 'bluejay_influxdb_volume:/var/lib/influxdb'
      - './configurations/influxdb:/etc/influxdb'
      - './backups/influxdb:/var/backups'
    mem_limit: 1200m
    restart: 'unless-stopped'
# ================================================
  bluejay_registry_db:
    container_name: bluejay-registry-db
    image: mongo
    networks:
      governify_network:
        aliases:
          - mongo_registry
    volumes:
      - 'bluejay_registry_db_volume:/data/db'
      - './backups/mongodb:/data2import'
    mem_limit: 2000m
    restart: 'unless-stopped'
# ================================================
  bluejay_redis:
    container_name: bluejay-redis
    image: redis
    networks:
      governify_network:
        aliases:
          - redis
    volumes:
      - 'bluejay_redis_volume:/data'
    mem_limit: 1200m
    restart: 'unless-stopped'
volumes:
  bluejay_influxdb_volume: null
  bluejay_registry_db_volume: null
  bluejay_grafana_volume: null
  bluejay_redis_volume: null
networks:
  governify_network:
    external: true
